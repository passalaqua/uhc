%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construct a Type Environment, to be used in other AG transformations.
%%% 
%%% Note that if the transformation changes types (or introduces new bindings), these will
%%% not show up in this type environment until after the transformation completes.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi) ag import({TyCore/AbsSyn})
%%]

%%[(8 codegen tycore tauphi)
ATTR AllExpr
  [
  |
  | copy : SELF
  ]
ATTR AllExpr
  [ tyEnv     : {Map.Map HsName Ty}
  |
  | newTyEnv  USE {`Map.union`} {Map.empty} : {Map.Map HsName Ty}
  ]

{
lazyElem :: HsName -> Map.Map HsName Ty -> Bool
lazyElem nm mp = maybe False isLazy $ Map.lookup nm mp

isLazy Expr_Lazy{} = True
isLazy _           = False
}


-- Top level environment propagation

SEM Module
  | Mod
                tbinds      .   tyEnv       =   Map.empty
                vbinds      .   tyEnv       =   @vbinds.newTyEnv


-- Let environment stitching

SEM Expr
  | Let
                lhs         .   newTyEnv    =   Map.empty
                vbinds      .   tyEnv       =   if @categ == ValBindCateg_Rec
                                                then @extTyEnv
                                                else @lhs.tyEnv
                body        .   tyEnv       =   @extTyEnv
                loc         .   extTyEnv    =   @vbinds.newTyEnv `Map.union` @lhs.tyEnv


-- Lambda environment stitching

SEM Expr
  | Lam
                lhs         .   newTyEnv    =   Map.empty
                res         .   tyEnv       =   @extTyEnv
                loc         .   extTyEnv    =   @arg.newTyEnv `Map.union` @lhs.tyEnv
SEM ExprSeq1
  | L0Bind
                lhs         .   newTyEnv    =   Map.singleton @nm @l1.copy
%%]

