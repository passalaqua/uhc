%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) import({Silly/AbsSyn})
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC).wrapper
WRAPPER SilModule
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) hs module {%{EH}Silly.EmbedVars} export(embedVars)
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import({%{EH}Silly})
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import({%{EH}Base.Common})
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import({%{EH}Opts})
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import(Data.Bits)
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import(qualified Data.Map as Map)
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import(qualified Data.Set as Set)
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import(Debug.Trace)
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) hs


decrement :: Int -> Int
decrement n = n-1

embedVars :: EHCOpts -> SilModule -> SilModule
embedVars options input   
  = let t = wrap_SilModule (sem_SilModule input)
                           (Inh_SilModule {opts_Inh_SilModule = options})
    in trf_Syn_SilModule t
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC)

ATTR SilModule   [ opts : {EHCOpts} | | ]
ATTR AllNT [ | | trf: SELF ]

ATTR Statement Statements Alternative Alternatives Variable Value Values [ numberLocals : {Int} | | ]
ATTR Statement Statements Alternative Alternatives                       [ | embedMap : {EmbedMap} | ]
ATTR Variable Value Values                                               [ embedMap : {EmbedMap} | | ]


ATTR Statement Statements Alternative Alternatives Variable              [ | | localsSet USE {`Set.union`} {Set.empty}: {Set.Set HsName} ]

ATTR Statement Statements Alternative Alternatives Variable              [ | | definedBelow USE {`Set.union`} {Set.empty}: {Set.Set HsName} ]
ATTR Statement Statements Alternative Alternatives                       [ definedEarlier: {Set.Set HsName} | | ]

ATTR Statement Statements Alternative Alternatives Variable Value Values [ | | usedBelow USE {`Set.union`} {Set.empty}: {Set.Set HsName} ]
ATTR Statement Statements Alternative Alternatives                       [ usedLater: {Set.Set HsName} | | ]

-- Old style, but still in use for embedding
--ATTR Statement Statements Alternative Alternatives                       [ neededSet: {Set.Set HsName} | | ]
--ATTR Statement Statements Alternative Alternatives Variable Value Values [ | | usedSet USE {`Set.union`} {Set.empty}: {Set.Set HsName} ]



ATTR Statement Statements Alternative Alternatives                       [ numberParameters : {Int} | | ]
ATTR Statement                                                           [ | | trfStats: {[Statement]} ]
ATTR Function Functions 
     Statement Statements Alternative Alternatives Value Values Variable [ optGenOwn  : {Bool}  | | ]

ATTR Function Functions                                                  [ | | frameSizes USE {`Map.union`} {Map.empty}: {Map.Map HsName Int} ]
ATTR Function Functions 
     Statement Statements Alternative Alternatives                       [ frameSizeMp : {Map.Map HsName Int} | | ]


SEM SilModule
  | SilModule  loc.optGenOwn            = 
%%[[(8 llvm)
                                          not (ehcOptEmitLLVM @lhs.opts)
%%][
                                          True
%%]]
               functions. frameSizeMp   = @functions.frameSizes


ATTR Values [ | | length : {Int} ]

SEM Values
  | Nil lhs.length = 0
  | Cons lhs.length = 1 + @tl.length


ATTR Functions Function 
     Statements Statement 
     Alternatives Alternative             [  |  retNr : {Int} |  ]
                                

SEM SilModule
  | SilModule     functions . retNr   = 3


ATTR Statements Statement Alternatives Alternative [ localsEnv : {Map.Map HsName SilTp}  |  |  ]

SEM Function
  | Function      body.localsEnv = Map.fromList @locals


--SEM Statements
--  | Cons  lhs.retNr < lhs.definedBelow




%%]

%%[(8 codegen grin wholeprogAnal wholeprogC)

{
worthyIsPointer :: HsName -> Map.Map HsName SilTp -> Bool
worthyIsPointer x env
  =  case Map.lookup x env of
       Nothing -> trace ("warning: " ++ show x ++ " not in localsEnv\n") False
       Just t  -> case t of
                    SilTpPtr   -> True
                    SilTpWord  -> False
                    SilTpTag   -> False
                    SilTpUnion -> {- trace ("warning: " ++ show x ++ " has ambiguous type " ++ show t ++ "\n") -} True
                    _          -> {- trace ("warning: " ++ show x ++ " has unknown type "   ++ show t ++ "\n") -} True
       
}

SEM Statement
  | Call      lhs . trfStats =  if not @lhs.optGenOwn
                                then [@loc.trf]
                                else if @tailJumps
                                then (  let nl = @lhs.numberLocals
                                            np = @lhs.numberParameters
                                            frameSize    = nl + np + 1
                                            sources      = reverse @args.trf                                                    -- put arguments on the stack
                                            destinations = iterate decrement (frameSize -2)
                                            adjust       = frameSize - (Map.findWithDefault (error (show @name ++ " not found in frameSizeMp")) @name @lhs.frameSizeMp)
                                        in  Statement_Comment ["Tailcall"]
                                            :
                                            smartAssignment (zip destinations sources)                                          -- do stack-putting in an overlapping fashion with the original stack contents
                                            ++
                                            [ Statement_Assignment Variable_SP (Value_Offset Variable_SP adjust)                -- adjust stack: increment for original parameters&callinfo&locals, decrement for new parameters&callinfo
                                            | adjust /= 0                                                                       --   (if necessary)
                                            ]
                                            ++
                                            [ Statement_Call @name True []                                                      -- do the jump, which will return to the original return address
                                            ]
                                     )
                                else (  let nl = @lhs.numberLocals
                                            np = @lhs.numberParameters
                                            worthyVars  = [ (nl-n,v)
                                                          | Variable_Local n v <- Map.elems @lhs.embedMap
                                                          , Set.member v @lhs.usedLater
                                                          , Set.member v @lhs.definedEarlier
                                                          , worthyIsPointer v @lhs.localsEnv
                                                          ]
                                            worthyNames   = map snd worthyVars
                                            worthyIndexes = map fst worthyVars ++ [nl .. nl+np-1]
                                            stackInfo = (nl+np, Set.fromList worthyIndexes)
                                            sources       = Value_Label @loc.label                                              -- put return address on the stack
                                                            : reverse @args.trf                                                 -- put arguments on stack
                                            destinations  = (map (Variable_Subs Variable_SP) (iterate decrement (-1)))
                                            adjust        = - (Map.findWithDefault (error (show @name ++ " not found in frameSizeMp")) @name @lhs.frameSizeMp)
                                        in  Statement_Comment ["Call, worthy: " ++ show worthyNames]
                                            : zipWith Statement_Assignment destinations sources                                 -- do stack-putting by assignments
                                            ++ 
                                            [ Statement_Assignment Variable_SP (Value_Offset Variable_SP adjust)                -- adjust stack: decrement for new parameters&callinfo
                                            , Statement_Call @name False []                                                     -- do the call (in fact a jump, which will return one line below here)
                                            , Statement_Label @loc.label stackInfo                                              -- return here after the call
                                            ]
                                     )
           lhs.retNr     = if @tailJumps
                           then @lhs.retNr
                           else @lhs.retNr + 1       -- increment the return label counter if necessary
           loc.label     = "retlab"++show @lhs.retNr

                                
  | Return    lhs . trfStats = let nl = @lhs.numberLocals
                                   np = @lhs.numberParameters
                                   frameSize = nl +  np + 1
                               in  zipWith Statement_Assignment 
                                           [Variable_Subs Variable_RP i | i <- [0..] ]
                                           @vals.trf
                                   ++
                                   (  if @lhs.optGenOwn
                                      then [ Statement_Assignment Variable_SP (Value_Offset Variable_SP frameSize)
                                           , Statement_Return []
                                           ]                                    
                                      else []
                                   )

  | Assignment lhs . trfStats     = if @source.isAlloc
                                    then let worthyNames = [ v
                                                           | Variable_Local n v <- Map.elems @lhs.embedMap
                                                           , Set.member v @lhs.usedLater
                                                           , Set.member v @lhs.definedEarlier
                                                           , worthyIsPointer v @lhs.localsEnv
                                                           ]
                                         in  [ Statement_Comment ["Allocation, worthy: " ++ show worthyNames]
                                             , @loc.trf
                                             ]
                                    else [@loc.trf]
               source.stackInfo   = if @source.isAlloc
                                    then let   nl = @lhs.numberLocals
                                               np = @lhs.numberParameters
                                               worthyIndexes  = [ nl - n
                                                                | Variable_Local n v <- Map.elems @lhs.embedMap
                                                                , Set.member v @lhs.usedLater
                                                                , Set.member v @lhs.definedEarlier
                                                                , worthyIsPointer v @lhs.localsEnv
                                                                ]
                                                                ++ 
                                                                [nl .. nl + @lhs.numberParameters-1]
                                         in  (nl+np, Set.fromList worthyIndexes)
                                    else undefined

  | * - Return
        Assignment
        Call   lhs . trfStats = [@loc.trf]
        
        
SEM Statement        
  | Assignment2 source   . stackInfo  = undefined
  | IfThenElse  condition. stackInfo  = undefined
  | Switch      scrutinee. stackInfo  = undefined
  | Voiden      val      . stackInfo  = undefined
  
SEM Values
  | Cons        hd       . stackInfo  = undefined
               

SEM Statements
  | Cons      lhs . trf      =   @hd.trfStats ++ @tl.trf


ATTR Value [ stackInfo : {StackInfo} | | isAlloc : {Bool} ]

SEM Value
  | Alloc    lhs . isAlloc = True
             lhs . trf     = Value_Alloc @size @gcManaged @lhs.stackInfo
  | *-Alloc  lhs . isAlloc = False

SEM Function
  | Function  lhs . trf    =  Function_Function @name
                                                -- parameters
                                                (if @lhs.optGenOwn then [] else @parameters)
                                                -- locals
                                                (if @lhs.optGenOwn then [] else @locals)
                                                -- body
                                                (  ( if   @lhs.optGenOwn
                                                     then [ Statement_Comment ["Expects " ++ show (length @parameters) ++ " parameters, uses " ++ show @loc.numberLocals ++ " local variables" ]
                                                          ]
                                                     else []
                                                   )
                                                   ++ @body.trf
                                                )

SEM Function
  | Function  lhs . frameSizes = Map.singleton @name (@loc.numberLocals + length @parameters + 1)

                                                
SEM Function
  | Function  body . numberParameters = length @parameters
              body . embedMap = Map.fromList (zipWith (makeEmbedTupel Variable_Param) [1..] @parameters)
              loc  . numberLocals : {Int}
              loc  . numberLocals = maxNeededLocal @body.localsSet @body.embedMap


ATTR Variable [ | | unembeddedName : {Maybe HsName} ]
SEM Variable
  | Unembedded   lhs.unembeddedName = Just @name
  | *-Unembedded lhs.unembeddedName = Nothing

SEM Statement
  | Assignment
    Assignment2 loc . embedMap : EmbedMap
                loc . embedMap = maybe @lhs.embedMap
                                       (\name@(HsName_Nr{-use: hsnMbNr-} nr _) -> if    Map.member nr @lhs.embedMap
                                                              then  @lhs.embedMap
                                                              else  let -- newint = 1 + maxNeededLocal undefined @lhs.embedMap
                                                                        newint = 1 + maxNeededLocal @lhs.usedLater @lhs.embedMap
                                                                        -- newint = 1 + maxNeededLocal @lhs.neededSet @lhs.embedMap
                                                                        newvar = Variable_Local newint name
                                                                    in  -- trace ("new local: " ++ show newvar ) $
                                                                        Map.insert nr newvar @lhs.embedMap
                                       )
                                       @dest.unembeddedName
  
{
maxNeededLocal :: Set.Set HsName -> EmbedMap -> Int
maxNeededLocal s m = let ns = [ n |  Variable_Local n v <- Map.elems m 
                              -- , Set.member v s 
                              ]
                     in  if null ns then 0 else maximum ns
}



-------------------------------------------------------------------------
--  Sets of variables that are defined or used in various places
-------------------------------------------------------------------------


--SEM Variable
--  | Unembedded      lhs . usedSet = Set.singleton @name

--SEM Function
--  | Function       body . neededSet = Set.empty
  
--SEM Statements
--  | Cons           hd . neededSet = Set.union @lhs.neededSet @tl.usedSet

--SEM Alternatives
--  | Cons           hd . neededSet = Set.union @lhs.neededSet @tl.usedSet




SEM Variable
  | Unembedded      lhs . usedBelow              = Set.singleton @name     -- for all Variables, also those in Values
  | Unembedded      lhs . definedBelow           = Set.singleton @name     -- only for Variables that are destination of an Assignment

SEM Function
  | Function        body . usedLater             = Set.empty
  | Function        body . definedEarlier        = Set.empty
  
SEM Statements
  | Cons            hd . usedLater               = Set.union @tl.usedBelow    @lhs.usedLater 
  | Cons            tl . definedEarlier          = Set.union @hd.definedBelow @lhs.definedEarlier

SEM Alternatives
  | Cons            lhs . definedBelow           = Set.union @hd.definedBelow @tl.definedBelow
--  | Cons            hd . usedLater         = Set.union @lhs.usedLater @tl.usedBelow                  -- should not be necessary



SEM Variable
  | Unembedded      lhs . localsSet = case @name of
                                       HsName_Nr{-use: hsnMbNr-} _ (OrigGlobal _) -> Set.empty
                                       _                      -> Set.singleton @name
  | *-Unembedded    lhs . localsSet = Set.empty



SEM Variable
  | Unembedded   lhs.trf =  embedUsing (if   @lhs.optGenOwn 
                                        then strategyOnStack @lhs.numberLocals
                                        else strategyId
                                       ) 
                                       @lhs.embedMap 
                                       @name

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Embedding of parameters and local variables on the stack
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC) hs

type EmbedMap = Map.Map Int Variable
type EmbedFunction = HsName->Variable
type EmbedStrategy = Variable -> Variable

makeEmbedTupel :: (Int->HsName->Variable) -> Int -> HsName -> (Int,Variable)
makeEmbedTupel constr k x@(HsName_Nr{-use: hsnMbNr-} n _) = (n, constr k x)

strategyId :: EmbedStrategy
strategyId v = v

strategyOnStack :: Int -> EmbedStrategy
strategyOnStack d (Variable_Local n _) = Variable_Subs Variable_SP (d-n)
strategyOnStack d (Variable_Param n _) = Variable_Subs Variable_SP (d+n-1)

embedUsing :: EmbedStrategy -> EmbedMap -> EmbedFunction
embedUsing strat m x@(HsName_Nr{-use: hsnMbNr-} n _) = if n==0
                                   then Variable_None
                                   else maybe (Variable_Global x)
                                              strat
                                              (Map.lookup n m)


--showEmbedPair :: Int -> HptMap -> (Int,Variable) -> String
--showEmbedPair d h (i, Variable_Param n name) = "Param " ++ show n ++ " \t" ++ postPad 12 (hsnShowAlphanumeric name) ++ "\tSP[" ++ show (d+1+n) ++ "]\t(" ++ show (getEnvVar h i) ++ ")"
--showEmbedPair d h (i, Variable_Local n name) = "Local " ++ show n ++ " \t" ++ postPad 12 (hsnShowAlphanumeric name) ++ "\tSP[" ++ show (d+0-n) ++ "]\t(" ++ show (getEnvVar h i) ++ ")"

postPad n s = let w = length s
              in  if w>=n then s else s ++ replicate (n-w) ' '
                  

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The Smart Assignation strategy (probably reinvented a topological sort algorithm here)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC) hs

type EIV = Either Int Value
data SmartTree = SmartTree EIV [(SmartTree,Maybe Int)]
       deriving Show

smartAssignment :: [(Int,Value)] -> [Statement]
smartAssignment = concat . map smartAss . foldr smartAdd [] . convertTups
{-
smartAssignment tups = let convs  = trace ("smart tups=" ++ show tups)  $ convertTups tups
                           trees  = trace ("smart convs="++ show convs) $ foldr smartAdd [] convs
                           statss = trace ("smart trees="++ show trees) $ map smartAss trees
                           res    = trace ("smart stats="++ show statss)$ concat statss
                       in  res
-}

isJust Nothing = False
isJust (Just _)= True

convertTups :: [(Int,Value)] -> [(EIV,Maybe Int,Int)]
convertTups tups = [ (dependency, mbindex, destination) 
                   | (destination, value) <- tups
                   , let (dependency,mbindex) = smartDep value
                   , either (\dep->dep/=destination || isJust mbindex) (\v->True) dependency
                   ]

smartDep :: Value -> (EIV,Maybe Int)
smartDep (Value_Var (Variable_Subs Variable_SP n)) = (Left n,Nothing)
smartDep (Value_Var (Variable_Subs (Variable_Subs Variable_SP n) k)) = (Left n,Just k)
smartDep v = (Right v,Nothing)

-- single out the tree that has n as its root, or make a new tree
smartFind :: EIV -> [SmartTree] -> (SmartTree, [SmartTree])
smartFind n [] =  (SmartTree n [], [])
smartFind n (t@(SmartTree r ks):ts)
  | n==r       =  (t, ts)
  | otherwise  =  let (t2,ts2) = smartFind n ts
                  in (t2, t:ts2)

smartAdd :: (EIV,Maybe Int,Int) -> [SmartTree] -> [SmartTree]
smartAdd p@(dep,mbi,dest) ts = let (found,ts2) = smartFind (Left dest) ts
                                   (rs,b) = smartIns (dep,found,mbi) ts2
                               in  if b
                                   then rs
                                   else (SmartTree dep [(found,mbi)]) : ts2
                           
                           
smartInsert :: (EIV,SmartTree,Maybe Int) -> SmartTree -> (SmartTree,Bool)
smartInsert p@(dep,found,mbi) t@(SmartTree root kids)
 | dep==root  =  (SmartTree root ((found,mbi):kids), True)
 | otherwise  =  let (kids2,mbis2) = unzip kids
                     (rs,b) = smartIns p kids2
                 in  if b
                     then (SmartTree root (zip rs mbis2), True)
                     else (t                            , False)
                    
smartIns :: (EIV,SmartTree,Maybe Int) -> [SmartTree] -> ([SmartTree],Bool)
smartIns p ts = foldr f ([],False) ts
  where f t (rs,True) = (t:rs, True)
        f t (rs,False) = let (r,b) = smartInsert p t
                         in  (r:rs, b)
       
smartElems :: SmartTree -> [Int]
smartElems (SmartTree (Left n) [])   = [n]
smartElems (SmartTree (Left n) kids) = n : concat (map smartElems (map fst kids))


auxVar = Variable_Aux
auxVal = Value_Var auxVar

smartAss :: SmartTree -> [Statement]
smartAss t@(SmartTree root kids) 
  =  either
     (\n -> if  n `elem` concat (map smartElems (map fst kids))
            then Statement_Assignment auxVar (Value_Var (Variable_Subs Variable_SP n))
                 : concat (map (smartChain (mbsubs auxVar)) kids)
            else concat (map (smartChain (mbsubs (Variable_Subs Variable_SP n))) kids)
     )
     (\v -> concat (map (smartChain (const v)) kids)
     )
     root
  
mbsubs :: Variable -> (Maybe Int -> Value)
mbsubs var Nothing  = Value_Var var
mbsubs var (Just i) = Value_Var (Variable_Subs var i)
  
smartChain :: (Maybe Int -> Value) -> (SmartTree,Maybe Int) -> [Statement]
smartChain v (SmartTree (Left root) kids, mbindex) 
   = concat (map (smartChain (mbsubs (Variable_Subs Variable_SP root))) kids) 
     ++ [ Statement_Assignment (Variable_Subs Variable_SP root) 
                               (v mbindex) 
        ]

       
%%]
