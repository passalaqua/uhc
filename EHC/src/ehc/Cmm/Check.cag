%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Checks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs module {%{EH}Cmm.Check}
%%]

%%[(8 codegen cmm) hs import(Data.Maybe,{%{EH}Base.Common} hiding (Range),{%{EH}Cmm},{%{EH}Error})
%%]

%%[(8 codegen cmm) hs import(UHC.Util.Utils, qualified UHC.Util.FastSeq as Seq)
%%]

%%[(8 codegen cmm) hs import(qualified Data.Map as Map, qualified Data.Set as Set, Control.Monad.State)
%%]

%%[(8 codegen cmm).WRAPPER ag import({Cmm/AbsSyn})
WRAPPER AGItf
%%]

%%[(8 codegen cmm) ag import({Cmm/CommonNm})
%%]

%%[(8 codegen cmm)
%%]
PRAGMA nocycle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(cmmModCheck)
cmmModCheck :: Module -> [Err]
cmmModCheck cmmmod
  = Seq.toList $ errs_Syn_AGItf t
  where t = wrap_AGItf (sem_AGItf (AGItf_AGItf cmmmod)) Inh_AGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Hooks provided to Cmm/CommonNm
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 cmm) hs
-- | Type of info bound to a name
type NmInfo = CVarInfo
%%]

%%[(8 cmm) hs
-- | Type synonym and functions for env
type Env k v = Map.Map k v

-- required, following Data.Map
emptyEnv				= Map.empty
envSingleton 	k v   	= Map.singleton k v
envAdd 			k v e 	= Map.insert k v e
envUnion 		e1 e2 	= Map.union e1 e2
envAddEnv 		e1 e2 	= envUnion e1 e2
envLookup 		k e   	= Map.lookup k e
envToList		e		= Map.toList e
envFromList		l		= Map.fromList l
-- stacklike behavior, additional functionality not existing in Data.Map
envLeave		e		= (emptyEnv,e)
envEnter		e		= e

-- optional
envAlter		f k e	= Map.alter f k e
%%]

%%[(8 cmm) hs import({%{EH}Base.Common} hiding (Range),{%{EH}CodeGen.CVar})
%%]

%%[(8 cmm) ag
SEM Import
  | Imp			loc		.	nmInfo			=	@cvar

SEM Decl
  | Const		loc		.	nmInfo			=	@cvar

SEM RegNmInit
  | NmInit		loc		.	nmInfo			=	@cvar

SEM Proc
  | Proc		loc		.	nmInfo			=	@cvar

SEM Formal
  | Formal		loc		.	nmInfo			=	@cvar

SEM Datum
  | Nm			loc		.	nmInfo			=	@cvar
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Errors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) ag
ATTR AllNT AGItf [ | | errs USE {`Seq.union`} {Seq.empty} : {Seq.Seq Err} ]
%%]

%%[(8 codegen cmm) ag
SEM AGItf
  | AGItf		lhs		.	errs		=	Seq.unions [@errsNoIntroNm, @module.errs]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Errors: not introduced names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) ag
ATTR AllNT [ | | noIntroNmS USE {`Set.union`} {Set.empty} : {Set.Set Nm} ]
%%]

%%[(8 codegen cmm) ag
SEM AGItf
  | AGItf       loc     .   errsNoIntroNm   =   if Set.null @module.noIntroNmS
                                                then Seq.empty
                                                else Seq.singleton $ mkErr_NamesNotIntrod emptyRange "ident" $ Set.toList @module.noIntroNmS
%%]

%%[(8 cmm) hs
noIntr :: Nm -> Maybe NmInfo -> Set.Set Nm
noIntr n = maybe (Set.singleton n) (const Set.empty)
%%]

%%[(8 cmm) ag
SEM Expr
  | CVar Nm     lhs     .   noIntroNmS	=   noIntr @envnm @mbNmInfo

SEM LValue
  | Nm          lhs     .   noIntroNmS	=   noIntr @envnm @mbNmInfo

SEM Stmt
  | Alloc       lhs     .   noIntroNmS	=   Set.unions [noIntr @envnm @mbNmInfo, @elts.noIntroNmS]
  | Box UnBox   lhs     .   noIntroNmS	=   Set.unions [noIntr @envnm @mbNmInfo, @expr.noIntroNmS]
%%]

