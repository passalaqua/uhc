%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Common AG for Core: predicates about context of something
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Let context
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
ATTR AllBind [ letBindingsCateg: CBindCateg | | ]

SEM CExpr
  | Let         loc         .   letBindingsCateg    =   @categ
  | Lam App
%%[[(8 coresysf)
    Arr
%%]]
  				loc         .   letBindingsCateg    =   acoreBindcategPlain

SEM CPatFld
  | Fld         bind        .   letBindingsCateg    =   acoreBindcategPlain
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is top App? Is top Tup adapt?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
ATTR CExpr CBound [ isTopApp: Bool  isTopTup: Bool | | ]

SEM CExpr
  | App         func        .   isTopApp    =   False
                arg         .   isTopApp    =   True
  | * - App Ann loc         .   isTopApp    =   True
  | TupUpd TupIns TupDel
                expr        .   isTopTup    =   False
                loc         .   isTopTup    =   True
  | * - TupUpd TupIns TupDel Ann
                loc         .   isTopTup    =   True

  | *           loc         .   isTopApp    :   Bool


SEM CModule
  | Mod         expr        .   isTopApp    =   True
                            .   isTopTup    =   True

SEM CBoundL
  | Cons		hd			.	isTopApp    =   True
                            .   isTopTup    =   True

SEM CBound
  | Bind
%%[[90
    FFE
%%]]
                expr        .   isTopApp    =   True
                            .   isTopTup    =   True

SEM CPatFld
  | Fld         offset      .   isTopApp    =   True
                            .   isTopTup    =   True

SEM CAlt
  | Alt         expr        .   isTopApp    =   True
                            .   isTopTup    =   True
%%]
SEM MbCExpr
  | Just        just        .   isTopApp    =   True
                            .   isTopTup    =   True

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Various contextual info, this should replace the above over time
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
ATTR CExpr [ | | whatBelow: WhatExpr ]

SEM CExpr
  | Lam         loc         .   whatBelow       =   maybe (ExprIsLam 1 Nothing) (\a -> ExprIsLam (a + 1) Nothing) $ whatExprMbLam @body.whatBelow
  | Var         loc         .   whatBelow       =   ExprIsVar @nm
  | Int         loc         .   whatBelow       =   ExprIsInt @int
  | App         loc         .   whatBelow       =   maybe (ExprIsApp 1 @func.whatBelow) (\(a,w) -> ExprIsApp (a + 1) w) $ whatExprMbApp @func.whatBelow
  | Tup			loc			.	whatBelow       =   ExprIsTup @tag
  | FFI			loc			.	whatBelow       =   ExprIsFFI
  |	String Char
%%[[97
    Integer
%%]]
           		loc			.	whatBelow		=	ExprIsOtherWHNF
  | * - Lam App Var Int Tup FFI
        String Char
%%[[97
        Integer
%%]]
        Ann CaseAltFail
                loc         .   whatBelow       =   ExprIsOther
%%]

%%[(8 core)
ATTR CExpr [ whatAbove: WhatExpr | | ]

SEM CExpr
  | Lam         loc         .   whatAbove       =   case @lhs.whatAbove of
                                                        ExprIsLam a mbnm    -> ExprIsLam (a + 1) mbnm
                                                        ExprIsBind nm       -> ExprIsLam 1       (Just nm)
                                                        _                   -> ExprIsLam 1       Nothing
  | App         loc         .   whatAbove       =   maybe (ExprIsApp 1 ExprIsOther) (\(a,w) -> ExprIsApp (a + 1) w) $ whatExprMbApp @lhs.whatAbove
  | * - Lam App Ann
                loc         .   whatAbove       =   ExprIsOther

SEM CExpr
  | Let         loc         .   isTopLet        =   whatExprIsBind @lhs.whatAbove
  | Lam         loc         .   isTopLam        =   not $ whatExprIsLam @lhs.whatAbove
  | App         loc         .   isTopApp'       =   isNothing $ whatExprMbApp @lhs.whatAbove

SEM CBound
  | Bind Val    loc         .   whatAbove       =   ExprIsBind @lhs.nm
%%[[90
  | FFE         loc         .   whatAbove       =   ExprIsLam 0	Nothing	-- the construction of a lambda is special for backend, to assume we are already in a lam, arity==0 indicating we do not know arity
%%]]

SEM CPatFld
  | Fld         loc         .   whatAbove       =   ExprIsOther

SEM CAlt
  | Alt         loc         .   whatAbove       =   ExprIsOther

SEM CModule
  | Mod         loc         .   whatAbove       =   ExprIsOther


SEM *
  | *           loc         .   whatAbove       :   WhatExpr
%%]
SEM MbCExpr
  | Just        loc         .   whatAbove       =   ExprIsOther


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context: rhs of lam yes/no
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin)
ATTR AllExprOnly AllAlt AllBind [ isLamBody: Bool | | ]

SEM CModule
  | Mod         expr        .   isLamBody   =   False

SEM CPatFld
  | Fld         offset      .   isLamBody   =   False
                bind		.   isLamBody   =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context: evaluation context (to replace isStrict), partially overridden in AG which includes this
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

not used yet as it seems not to be equivalent to isStrict. Can't find out why...

%%[(8 core)
ATTR AllExprOnly AllAlt AllBind [ evalCtx: EvalCtx | | ]

SEM CModule
  | Mod         expr        .   evalCtx         =   EvalCtx_Eval

SEM CPatFld
  | Fld         offset      .   evalCtx         =   EvalCtx_Eval
  				bind		.	evalCtx			=	EvalCtx_None

SEM CExpr
  | Let         loc         .   evalCtx         =   if @categ == CBindCateg_Strict
                                                    then EvalCtx_Eval
                                                    -- else if @isGlobal
                                                    -- then EvalCtx_Thunk
                                                    -- else EvalCtx_None
                                                    else EvalCtx_Thunk
  | App         arg         .   evalCtx         =   EvalCtx_Thunk
{-
SEM CBind
  | Bind Val	loc			.	evalCtx			=	case @lhs.evalCtx of
  														EvalCtx_Eval -> EvalCtx_Eval
  														EvalCtx_Thunk
  														  | whatExprIsLam @expr.whatBelow
  														      -> EvalCtx_PApp0
-}
%%]

SEM CBound
  | Bind Val FFE
                expr        .   evalCtx         =   if whatExprIsLam @expr.whatBelow
                                                    then EvalCtx_Eval
                                                    else @lhs.evalCtx
