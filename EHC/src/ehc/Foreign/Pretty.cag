%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Foreign pretty print
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[90 hs module {%{EH}Foreign.Pretty} import(UHC.Util.Pretty,{%{EH}Base.Common},{%{EH}Foreign}) 
%%]

%%[90.WRAPPER ag import({Foreign/AbsSyn})
WRAPPER ForeignAGItf ForeignExprAGItf
%%]

%%[90 hs export(ppForeignEnt)
ppForeignEnt :: ForeignEnt -> PP_Doc
ppForeignEnt ent
  =  let  t =  wrap_ForeignAGItf
                 (sem_ForeignAGItf (ForeignAGItf_AGItf ent))
                 Inh_ForeignAGItf
     in   pp_Syn_ForeignAGItf t

instance PP ForeignEnt where
  pp t = ppForeignEnt t
%%]

%%[90 hs export(ppForeignExpr)
ppForeignExpr :: String -> ForeignExpr -> PP_Doc
ppForeignExpr nm e
  =  let  t =  wrap_ForeignExprAGItf
                 (sem_ForeignExprAGItf (ForeignExprAGItf_AGItf e))
                 (Inh_ForeignExprAGItf
                   { entNm_Inh_ForeignExprAGItf = nm
                   })
     in   pp_Syn_ForeignExprAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[90
ATTR ForeignExprAGItf AllForeignExpr [ entNm: String | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% PP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[90
ATTR ForeignAGItf ForeignExprAGItf AllForeign ForeignExpr [ | | pp: PP_Doc ]

SEM JavaScriptCall
  -- | Id          lhs     .   pp      =   maybe empty (\i -> "%" >|< i >|< ".") @mbThisArgNr >|< pp @nm >|< maybe empty (\i -> "[%" >|< i >|< "]") @mbIndexArgNr
  | Id          lhs     .   pp      =   maybe (pp @nm) (ppForeignExpr @nm) @mbForeignExpr
  | Wrapper     lhs     .   pp      =   pp "wrapper"
  | Dynamic     lhs     .   pp      =   pp "dynamic"

SEM PrimCall
  | Id          lhs     .   pp      =   pp @nm >#< maybe empty pp @mbKnownPrim

SEM PlainCall
  | Id          lhs     .   pp      =   pp @nm

SEM CCall
  | Id          lhs     .   pp      =   (if @isStatic then pp "static" else empty)
                                        >#< (maybe empty pp @mbInclude)
                                        >#< (if @asPointer then pp "&" else empty)
                                        >#< @nm
  | Wrapper     lhs     .   pp      =   pp "wrapper"
  | Dynamic     lhs     .   pp      =   pp "dynamic"

SEM ForeignExpr
  | Call		lhs		.	pp		=	@expr.pp >|< ppParens empty
  | CallArgs	lhs		.	pp		=	@expr.pp >|< ppParensCommas @args.ppL
  | Ent			lhs		.	pp		=	pp @lhs.entNm
  | EntNm		lhs		.	pp		=	pp @nm
  | Arg			lhs		.	pp		=	"%" >|< @nr
  | AllArg		lhs		.	pp		=	pp "%*"
  | Sel			lhs		.	pp		=	@expr.pp >|< "." >|< @sel.pp
  | Inx			lhs		.	pp		=	@expr.pp >|< "[" >|< @inx.pp >|< "]"
  | Ptr			lhs		.	pp		=	"&" >|< @expr.pp
  | Empty		lhs		.	pp		=	empty
  | Str  		lhs		.	pp		=	pp $ show @str
  | ObjData     lhs     .   pp      =   pp "{}"
%%]

%%[90
SEM ForeignExprs [ | | ppL: {[PP_Doc]} ]
  | Nil			lhs		.	ppL		=	[]
  | Cons		lhs		.	ppL		=	@hd.pp : @tl.ppL
%%]
