%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to AnaDomain subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat doclatex
Substitution for AnaDomain.
%%]

%%[(8 codegen) hs module {%{EH}AnaDomain.Ftv} import({%{EH}Base.Common},{%{EH}AnaDomain})
%%]

%%[(8 codegen) hs import(qualified Data.Set as Set)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) ag import({AnaDomain/AbsSyn})
WRAPPER TyAGItf
%%]

%%[(8 codegen) hs export(tyFv)
tyFv :: RelTyScheme -> UIDS
tyFv ty
  = tyFv_Syn_TyAGItf t
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf )
%%]

%%[(8 codegen) hs export(relFv)
relFv :: RelTyScheme -> UIDS
relFv ty
  = relFv_Syn_TyAGItf t
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf )
%%]

%%[(8 codegen) hs export(appFv)
appFv :: RelTyScheme -> UIDS
appFv ty
  = appFv_Syn_TyAGItf t
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fv
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT TyAGItf [ | | tyFv  USE {`Set.union`} {Set.empty} : UIDS ]
ATTR AllNT TyAGItf [ | | relFv USE {`Set.union`} {Set.empty} : UIDS ]
ATTR AllNT TyAGItf [ | | appFv USE {`Set.union`} {Set.empty} : UIDS ]
%%]

%%[(8 codegen)
SEM RelTyScheme
  | Ty              lhs.tyFv  = Set.difference @ty.tyFv @alphas
                    lhs.relFv = Set.difference @ty.relFv @betas
                    lhs.appFv = Set.difference @ty.appFv @gammas

SEM Relev
  | Beta            lhs.relFv = Set.singleton(@v)

SEM Applic
  | Gamma           lhs.appFv = Set.singleton(@v) `Set.union` @deps.appFv
%%]

