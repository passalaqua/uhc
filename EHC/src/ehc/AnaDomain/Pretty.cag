%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% AnaDomain Pretty Printer
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}AnaDomain.Pretty} import(UHC.Util.Pretty,{%{EH}AnaDomain})
%%]

%%[(8 codegen) hs import({%{EH}Base.Common})
%%]

%%[(8 codegen) hs import(qualified Data.Map as Map, qualified Data.Set as Set, Data.Char)
%%]

%%[(8 codegen).WRAPPER ag import({AnaDomain/AbsSyn})
WRAPPER
  AnaTyScheme AnaTy
%%]

%%[(8 codegen) hs export(ppAnaTySch)
ppAnaTySch :: AnaTyScheme -> PP_Doc
ppAnaTySch x
  =  let  t = wrap_AnaTyScheme (sem_AnaTyScheme x)
                               (Inh_AnaTyScheme { alphas_Inh_AnaTyScheme = Set.empty
                                                , betas_Inh_AnaTyScheme = Set.empty
                                                , gammas_Inh_AnaTyScheme = Set.empty
                                                })
     in   pp_Syn_AnaTyScheme t

instance PP AnaTyScheme where
  pp = ppAnaTySch
%%]

%%[(8 codegen) hs export(ppAnaTy)
ppAnaTy :: AnaTy -> PP_Doc
ppAnaTy x
  =  let  t = wrap_AnaTy (sem_AnaTy x)
                         (Inh_AnaTy  )
     in   pp_Syn_AnaTy t

instance PP AnaTy where
  pp = ppAnaTy
%%]

%%[(8 codegen) hs
instance Show RVarMpInfo where
  show _ = "RVarMpInfo"

instance PP RVarMpInfo where
  pp (RVMIType a) = pp a
  pp (RVMIRelev ) = empty
  pp (RVMIApplic) = empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT [ | | pp USE {>-<} {empty} : PP_Doc ]

ATTR TyAGItf AnaTyScheme AnaTySchemeL [ alphas : {UIDS} | | ]
ATTR TyAGItf AnaTyScheme AnaTySchemeL [ betas  : {UIDS} | | ]
ATTR TyAGItf AnaTyScheme AnaTySchemeL [ gammas : {UIDS} | | ]

SEM AnaTyScheme
  | Tau         lhs         .   pp          =   @loc.alpha >#< @loc.beta >#< @loc.gamma >#< @ty.pp
                loc         .   alpha       =   if Set.null @lhs.alphas then empty else pp "\\a/" >|< ppParens (show @lhs.alphas)
                loc         .   beta        =   if Set.null @lhs.betas  then empty else pp "\\b/" >|< ppParens (show @lhs.betas)
                loc         .   gamma       =   if Set.null @lhs.gammas then empty else pp "\\g/" >|< ppParens (show @lhs.gammas)
  | * - Tau     lhs         .   pp          =   @ty.pp
  | FAAlpha     ty          .   alphas      =   Set.insert @alpha @lhs.alphas
  | FABeta      ty          .   betas       =   Set.insert @beta @lhs.betas
  | FAGamma     ty          .   gammas      =   Set.insert @gamma @lhs.gammas

SEM AnaTy
  | Unit        lhs         .   pp          =   pp "()"
  | Alpha       lhs         .   pp          =   pp @v
  | Arrow       lhs         .   pp          =   @arg.pp >|< pp "-(" >|< @phi.pp >|< pp "," >|< @psi.pp >|< pp ")->" >|< @res.pp
  | Data        lhs         .   pp          =   pp "D" >|< ppParens (show @params.ppL)

SEM Relev
  | Top         lhs         .   pp          =   pp "T"
  | Rel         lhs         .   pp          =   pp "R"
  | Beta        lhs         .   pp          =   pp ("B" ++ show @v)

SEM Applic
  | Top         lhs         .   pp          =   pp "T"
  | App         lhs         .   pp          =   pp "A"
  | Gamma       lhs         .   pp          =   if null @deps.ppL then pp ("G" ++ show @v) else ppBrackets (("G" ++ show @v ++ "+->") >|< @deps.ppL)
%%]

%%[(8 codegen)
SEM AnaTySchemeL AnaTyL Rho [ | | ppL: {[PP_Doc]} ]
  | Nil         lhs         .   ppL         =   []
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
%%]
