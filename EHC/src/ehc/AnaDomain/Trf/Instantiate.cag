%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to RelevTy instantiate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}AnaDomain.Trf.Instantiate}
%%]

%%[(8 codegen) hs import({%{EH}Base.Common},{%{EH}AnaDomain},{%{EH}VarMp},{%{EH}Substitutable})
%%]

%%[(8 codegen) hs import(qualified Data.Map as Map, qualified Data.Set as Set)
%%]

%%[doesWhat
Instantiation replaces quantification with fresh type vars.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% anaTySchInst interface
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) ag import({AnaDomain/AbsSyn})
WRAPPER TyAGItf
%%]

%%[(8 codegen) hs export(anaTySchInst)
anaTySchInst :: UID -> AnaTyScheme -> AnaTyScheme
anaTySchInst uniq ty
  = ty'
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf
                 { gUniq_Inh_TyAGItf        = uniq
                 })
        ty' = repl_Syn_TyAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT [ | gUniq: UID | ]
ATTR TyAGItf [ gUniq: UID | | ]

SEM AnaTyScheme
  | FAAlpha     loc         .   lUniq       : UNIQUEREF gUniq
  | FABeta      loc         .   lUniq       : UNIQUEREF gUniq
  | FAGamma     loc         .   lUniq       : UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fresh vars, and their use
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM AnaTyScheme
  | FAAlpha     loc         .   freshTv     = mkNewLevUID @lUniq
  | FABeta      loc         .   freshTv     = mkNewLevUID @lUniq
  | FAGamma     loc         .   freshTv     = mkNewLevUID @lUniq
%%]

%%[(8 codegen)
ATTR AllNT [ freshMp: {Map.Map UID UID} | | ]

SEM TyAGItf
  | AGItf       loc         .   freshMp     = Map.empty

SEM AnaTyScheme
  | FAAlpha     loc         .   freshMp     = Map.insert @alpha @loc.freshTv @lhs.freshMp
  | FABeta      loc         .   freshMp     = Map.insert @beta  @loc.freshTv @lhs.freshMp
  | FAGamma     loc         .   freshMp     = Map.insert @gamma @loc.freshTv @lhs.freshMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT [ | | repl: SELF ]
ATTR TyAGItf [ | | repl: RelevTy ]
%%]

%%[(8 codegen)
SEM AnaTyScheme
  | Tau         loc         .   repl     = AnaTyScheme_Tau @ty.repl
  | FAAlpha     loc         .   repl     = @ty.repl
  | FABeta      loc         .   repl     = @ty.repl
  | FAGamma     loc         .   repl     = @ty.repl
%%]

%%[(8 codegen)
SEM AnaTy
  | Alpha       loc         .   repl     = AnaTy_Alpha $ Map.findWithDefault @v @v @lhs.freshMp
  | Arrow       loc         .   repl     = AnaTy_Arrow @phi.repl @psi.repl @arg.repl @res.repl
%%]

%%[(8 codegen)
SEM Relev
  | Beta        loc         .   repl     = Relev_Beta $ Map.findWithDefault @v @v @lhs.freshMp
SEM Psi
  | Psi         loc         .   repl     = Psi_Psi $ Map.findWithDefault @v @v @lhs.freshMp
%%]