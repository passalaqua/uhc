%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to RelevTy instantiate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}AnaDomain.Trf.Instantiate}
%%]

%%[(8 codegen) hs import({%{EH}Base.Common},{%{EH}AnaDomain},{%{EH}VarMp},{%{EH}Substitutable})
%%]

%%[(8 codegen) hs import(qualified Data.Map as Map, Data.Set)
%%]

%%[doesWhat
Instantiation replaces quantification with fresh type vars.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% relTySchInst interface
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) ag import({AnaDomain/AbsSyn})
WRAPPER TyAGItf
%%]

%%[(8 codegen) hs export(relTySchInst)
relTySchInst :: UID -> RelTyScheme -> RelTyScheme
relTySchInst uniq ty
  = ty'
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf
                 { gUniq_Inh_TyAGItf        = uniq
                 })
        ty' = repl_Syn_TyAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT [ | gUniq: UID | ]
ATTR TyAGItf [ gUniq: UID | | ]

SEM RelTyScheme
  | Ty          loc         .   lUniq       : UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fresh vars, and their use
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM RelTyScheme
  | Ty          loc         .   quants      = toList @alphas ++ toList @betas ++ toList @gammas
                loc         .   freshTvL    = mkNewLevUIDL (length @loc.quants) @lUniq
%%]

%%[(8 codegen)
ATTR RelTy RelTyL AllAnaAnnTy [ freshMp: {Map.Map UID UID} | | ]

SEM RelTyScheme
  | Ty          loc         .   freshMp     = Map.fromList $ zip @loc.quants @loc.freshTvL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT [ | | repl: SELF ]
ATTR TyAGItf [ | | repl: RelTyScheme ]
%%]

%%[(8 codegen)
SEM RelTyScheme
  | Ty          loc         .   repl     = RelTyScheme_Ty empty empty empty @ty.repl
%%]

%%[(8 codegen)
SEM RelTy
  | Alpha       loc         .   repl     = RelTy_Alpha $ Map.findWithDefault @v @v @lhs.freshMp
  | Arrow       loc         .   repl     = RelTy_Arrow @phi.repl @psi.repl @arg.repl @res.repl
%%]

%%[(8 codegen)
SEM Relev
  | Beta        loc         .   repl     = Relev_Beta $ Map.findWithDefault @v @v @lhs.freshMp
SEM Applic
  | Gamma       loc         .   repl     = Applic_Gamma (Map.findWithDefault @v @v @lhs.freshMp) @deps.repl
%%]